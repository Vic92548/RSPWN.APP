function openAnalytics() { if(isUserLoggedIn()){ document.getElementById("old_posts").style.display = "flex"; const old_posts_container = document.getElementById("old_posts_container"); old_posts_container.innerHTML = "Loading ..."; makeApiRequest("/me/posts", true).then(data => { console.log(data); old_posts_container.innerHTML = ""; for (let i = 0; i < data.length; i++) { const post = data[i]; const li = document.createElement("li"); const title = document.createElement("span"); title.textContent = post.title; li.appendChild(title); const stats = document.createElement("div"); stats.innerHTML = '<div><span><i class="fa-solid fa-eye"></i> ' + post.viewsCount + ' &nbsp;&nbsp;<i class="fa-solid fa-heart"></i> ' + post.likesCount + ' &nbsp;&nbsp;<i class="fa-solid fa-heart-crack"></i> ' + post.dislikesCount + ' &nbsp;&nbsp;<i class="fa-solid fa-user-plus"></i> ' + post.followersCount + '</span> <a href="/post/' + post.id + '">open</a></div>'; li.appendChild(stats); old_posts_container.appendChild(li); } }); }else{ openRegisterModal(); } } function closeAnalytics() { document.getElementById("old_posts").style.display = "none"; } background_images = [ { "id" : "bg_2", "title" : "Cozy aliens", "unlock" : 0 },{ "id" : "ninja_1", "title" : "ninja 1", "unlock" : 0 }, { "id" : "anime_city_night", "title" : "Anime city at night", "unlock" : 1 }, { "id" : "fantasy_forest", "title" : "Fantasy forest", "unlock" : 2 }, { "id" : "boss_fight_1", "title" : "Boss fight 1", "unlock" : 3 }, { "id" : "opex_1", "title" : "opex 1", "unlock" : 4 }, { "id" : "sci_fi_1", "title" : "Sci fi 1", "unlock" : 5 }, { "id" : "sci_fi_2", "title" : "Sci fi 2", "unlock" : 6 }, { "id" : "sci_fi_3", "title" : "Sci fi 3", "unlock" : 10 }, { "id" : "sci_fi_5", "title" : "Sci fi 5", "unlock" : 18 }, ] function equipBackground(url, save = true) { document.body.style.backgroundImage = 'url(' + url + ')'; closeCustomizationMenu(); hideMenu(); } function updateBackgroundId(newBackgroundId) { window.analytics.track('update_background', {newBackground: background_images[newBackgroundId], newBackgroundId}); if (!isUserLoggedIn()) { alert('You must be logged in to update your background.'); return; } const path = `/me/update-background?backgroundId=${encodeURIComponent(newBackgroundId)}`; makeApiRequest(path, true) .then(response => { console.log('Background updated successfully:', response); }) .catch(error => { console.error('Failed to update background:', error); alert('Failed to update background. Please try again.'); }); } function openCustomizationMenu() { displayBackgroundImages(); document.getElementById("background_images").style.display = "flex"; } function closeCustomizationMenu() { document.getElementById("background_images").style.display = "none"; } function displayBackgroundImages() { if(isUserLoggedIn()){ const background_images_container = document.getElementById("background_images_container"); background_images_container.innerHTML = ''; for (let i = 0; i < background_images.length; i++) { const img = background_images[i]; if(user.level >= img.unlock){ background_images_container.innerHTML += '<li class="background_image_div">\n' + ' <div onclick="updateBackgroundId(\'' + img.id + '\');equipBackground(\'https://vapr.b-cdn.net/background_images/' + img.id + '.webp\')" class="background_image_overlay">\n' + ' <h5>' + img.title + '</h5>\n' + ' </div>\n' + ' <img src="https://vapr.b-cdn.net/background_images/' + img.id + '.webp">\n' + ' </li>'; }else{ background_images_container.innerHTML += '<li class="background_image_div">\n' + ' <div class="background_image_overlay">\n' + ' <p><i class="fa-solid fa-lock"></i></p>\n' + ' <h5>Unlock at level ' + img.unlock + '</h5>\n' + ' </div>\n' + ' <img src="https://vapr.b-cdn.net/background_images/' + img.id + '.webp">\n' + '\n' + ' </li>'; } } }else{ openRegisterModal(); } } let feed_posts = []; let loading_steps = 2; let post_seen = 0; let creators = {}; function showInitialPost() { const path = window.location.pathname.split('/'); if(path.length < 3){ displayPost(); }else if(path[1] === "post"){ displayPost(path[2]); } } function makeApiRequest(path, requireAuth = true) { return new Promise((resolve, reject) => { let jwt = localStorage.getItem('jwt'); if (jwt === null) { jwt = ""; if(requireAuth){ reject("No JWT found in local storage."); return; } } console.log("JWT:" + jwt); const headers = new Headers({ "Authorization": `Bearer ${jwt}`, "Content-Type": "application/json" }); fetch(path, { method: 'GET', headers: headers }) .then(response => { if (!response.ok) { console.log(response); if(response.status === 401){ reject("Unauthorized"); }else{ throw new Error('Network response was not ok: ' + response.statusText); } } return response.json(); }) .then(data => { resolve(data); }) .catch(error => { reject(error); }); }); } function isUserLoggedIn(){ if(window.user){ return true; }else{ return false; } } function updateUsername() { const level_elements = document.getElementsByClassName("username"); for (let i = 0; i < level_elements.length; i++) { level_elements[i].textContent = user.username; console.log("updated username : " + user.username); } } function loadUserData(){ document.getElementById("sign_in").style.display = "none"; document.getElementById("add_post").style.display = "none"; makeApiRequest("/me").then(data => { window.user = data; updateUsername(); updateLevel(); for (let i = 0; i < background_images.length; i++) { if(background_images[i].id === data.backgroundId){ equipBackground('https://vapr.b-cdn.net/background_images/' + background_images[i].id + '.webp'); break; } } const oldUser = { xp: 0, level: window.user.level, xp_required: window.user.xp_required }; setXPProgress(oldUser, true); document.getElementById("sign_in").style.display = "none"; if(window.innerWidth <= 768){ document.getElementById("add_post").style.display = "block"; } document.getElementById("xp_bar").style.display = "block"; loading_steps--; hideLoading(); handleReferral(); window.analytics.identify(data.id, { email: data.email, name: data.username }); }).catch( error => { document.getElementById("sign_in").style.display = "block"; if(window.innerWidth <= 768){ document.getElementById("add_post").style.display = "block"; } document.getElementById("add_post").onclick = openRegisterModal; loading_steps--; hideLoading(); }) } loadUserData(); function hideLoading(){ console.log("steps:"+loading_steps); if(loading_steps <= 0){ document.getElementsByTagName('H1')[0].className = "title"; } } function showLoading(){ document.getElementsByTagName('H1')[0].className = "loading"; document.getElementsByTagName("ARTICLE")[0].style.transform = "translateY(0vh)"; } function timeAgo(dateParam) { if (!dateParam) { return null; } const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam); const today = new Date(); const seconds = Math.round((today - date) / 1000); const minutes = Math.round(seconds / 60); const hours = Math.round(minutes / 60); const days = Math.round(hours / 24); const months = Math.round(days / 30.4); const years = Math.round(days / 365); if (seconds < 60) { return `${seconds} seconds ago`; } else if (minutes < 60) { return `${minutes} minutes ago`; } else if (hours < 24) { return `${hours} hours ago`; } else if (days < 30) { return `${days} days ago`; } else if (months < 12) { return `${months} months ago`; } else { return `${years} years ago`; } } function setupSocialLink(id, link){ const link_bt = document.getElementById(id); link_bt.style.display = "inline-block"; link_bt.href = link; } function drawPost(data){ displayReactions(); makeApiRequest("/register-view?postId=" + data.id, false).then(data => { console.log(data); console.log("Views updated"); }); post_seen++; showPost(); console.log("Post DATA:"); console.log(data); updateFollowButton(); document.getElementById("post_title").textContent = data.title; document.getElementById("post_username").textContent = "@" + data.username; document.getElementById("post_time").textContent = timeAgo(data.timestamp); document.getElementById("post_views").textContent = formatViews(data.views); if(!data.content){ data.content = "https://vapr.b-cdn.net/posts/200w.gif"; } if(data.content.split("/posts/")[0] === "https://vapr.b-cdn.net"){ document.getElementById("post_image").src = data.content; document.getElementById("post_image").style.display = "block"; document.getElementById("post_content").style.display = "none"; }else{ document.getElementById("post_content").textContent = data.content; document.getElementById("post_content").style.display = "block"; document.getElementById("post_image").style.display = "none"; } const links = document.getElementById("post_link").children; for(let i = 0; i < links.length;i++){ links[i].style.display = "none"; } if(data.link){ const url = new URL(data.link); if(url.hostname.includes("itch.io")){ setupSocialLink("post_itch", data.link); } switch(url.hostname){ case 'discord.gg': setupSocialLink("post_discord", data.link); break; case 'www.reddit.com': setupSocialLink("post_reddit", data.link); break; case 'store.steampowered.com': setupSocialLink("post_steam", data.link); break; case 'x.com': setupSocialLink("post_x", data.link); break; case 'twitter.com': setupSocialLink("post_x", data.link); break; case 'www.threads.net': setupSocialLink("post_threads", data.link); break; case 'www.pinterest.fr': setupSocialLink("post_pinterest", data.link); break; case 'www.twitch.tv': setupSocialLink("post_twitch", data.link); break; case 'www.youtube.com': setupSocialLink("post_youtube", data.link); break; case 'www.instagram.com': setupSocialLink("post_instagram", data.link); break; case 'store.epicgames.com': setupSocialLink("post_epic", data.link); break; case 'www.kickstarter.com': setupSocialLink("post_kickstarter", data.link); break; case 'kick.com': setupSocialLink("post_kick", data.link); break; case 'www.patreon.com': setupSocialLink("post_patreon", data.link); break; case 'www.fortnite.com': setupSocialLink("post_fortnite", data.link); break; default: break; } } } let current_post_id = undefined; let current_post = undefined; function displayPost(postId = undefined){ hidePost(); if(!postId){ if(feed_posts.length > 0){ const data = feed_posts.shift(); loading_steps--; hideLoading(); current_post_id = data.id; current_post = data; drawPost(data); history.pushState(null, null, "/post/" + data.id); }else{ makeApiRequest("/feed", false).then(data => { console.log(data); feed_posts = data.sort((a, b) => 0.5 - Math.random()); console.log(data); displayPost(); }).catch(error => { console.log(error); }); } }else{ makeApiRequest("/posts/"+postId, false).then(data => { loading_steps--; hideLoading(); current_post_id = data.id; current_post = data; drawPost(data); history.pushState(null, null, "/post/" + data.id); }).catch(error => { console.log(error); }); } } function hidePost() { showLoading(); document.getElementsByClassName("post")[0].style.transform = "translateY(100vh)"; } function showPost() { const post = document.getElementsByClassName("post")[0]; post.style.transform = "translateY(0vh) translateX(0vw)"; post.style.backgroundColor = "rgba(255,255,255,0.4)"; post.style.boxShadow = "0 0px 15px rgba(255, 255, 255, 0.3)"; post.style.animation = 'none'; } document.getElementById('file').addEventListener('change', function() { if (this.files && this.files[0]) { var reader = new FileReader(); reader.onload = function(e) { document.getElementById('preview').src = e.target.result; document.getElementById('preview').style.display = "block"; document.getElementById('upload-icon').hidden = true; document.querySelector('.upload-text').textContent = 'Click to replace the image'; }; reader.readAsDataURL(this.files[0]); } }); function opeNewPostModel() { document.getElementById("add-post").style.display = "flex"; } function closeNewPostModel() { document.getElementById("add-post").style.display = "none"; } document.getElementById('postForm').addEventListener('submit', async function(event) { event.preventDefault(); const title = document.getElementById('title').value; const link = document.getElementById('link').value; const file = document.getElementById('file').files[0]; const formData = new FormData(); formData.append('title', title); formData.append('link', link); if (file) { const fileExtension = file.name.split('.').pop(); const fileName = `${new Date().getTime()}.${fileExtension}`; const fileContentType = file.type || 'application/octet-stream'; const blob = new Blob([file], { type: fileContentType }); formData.append("file", blob, fileName); } const jwt = localStorage.getItem('jwt'); const headers = new Headers({ "Authorization": `Bearer ${jwt}` }); try { document.getElementById("add-post").style.display = "none"; hidePost(); hideMenu(); const response = await fetch('/posts', { method: 'POST', body: formData, headers: headers }); const result = await response.json(); if (response.ok) { if(result.success){ window.analytics.track('new_post_uploaded', {postId: result.id}); document.getElementById("add-post").style.display = "none"; confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } }); displayPost(result.id); document.getElementById('title').value = ''; document.getElementById('file').value = ''; document.getElementById('link').value = ''; document.getElementById('preview').style.display = 'none'; const oldUser = { xp: window.user.xp, level: window.user.level, xp_required: window.user.xp_required }; window.user = result.user; setXPProgress(oldUser); }else{ alert(result.msg); } } else { alert('Failed to create post. Please try again with an other image.'); displayPost(); } } catch (error) { console.error('Failed to submit post:', error); alert('Error submitting post.'); } }); function openRegisterModal() { document.getElementById("register").style.display = "flex"; } function openUserAccountModel() { document.getElementById("account").style.display = "flex"; makeApiRequest("/me/posts").then(data => { console.log("Coucou"); console.log(data); const old_posts = document.getElementById("old-posts"); old_posts.innerHTML = ""; for (let i = 0; i < data.length; i++) { old_posts.innerHTML += '<div class="post-card">\n' + ' <h4>' + data[i].title + '</h4>\n' + ' <div style="display: flex; justify-content: space-between">\n' + ' <span><i class="fa-solid fa-eye"></i> <span>loading...</span></span>\n' + ' <span><i class="fa-solid fa-heart"></i> <span>loading...</span></span>\n' + ' <span><i class="fa-solid fa-heart-crack"></i> <span>loading...</span></span>\n' + ' <span><i class="fa-solid fa-forward"></i> <span>loading...</span></span>\n' + ' </div>\n' + ' </div>' } }).catch( () => { const old_posts = document.getElementById("old-posts"); old_posts.innerHTML = "<p>You don't have created any posts yet, what are you waiting for? :)</p>"; }) } async function updateFollowButton() { const follow_bt = document.getElementById("follow"); if(isUserLoggedIn()){ let following; console.log("CURRENT POST"); console.log(current_post); if(creators[current_post.userId]){ following = creators[current_post.userId].following; }else{ creators[current_post.userId] = { following: false } } if(following === undefined){ following = await checkUserFollowsCreator(current_post.userId); creators[current_post.userId].following = following; } follow_bt.style.opacity = "0"; follow_bt.style.display = "inline-block"; if(following){ follow_bt.innerHTML = '<i class="fa-solid fa-user-minus"></i>'; follow_bt.onclick = unfollowPost; follow_bt.style.border = "1px solid rgb(206 220 247 / 42%)"; follow_bt.style.backgroundColor = "rgb(190 213 255 / 40%)"; }else{ follow_bt.innerHTML = '<i class="fa-solid fa-user-plus"></i>'; follow_bt.onclick = followPost; follow_bt.style.border = "1px solid rgb(77 137 245)"; follow_bt.style.backgroundColor = "rgb(95 148 243)"; } follow_bt.style.opacity = "1"; if(current_post.userId === user.id){ follow_bt.style.opacity = "0"; follow_bt.style.display = "none"; } }else{ follow_bt.onclick = openRegisterModal; } } function followPost() { creators[current_post.userId].following = true; updateFollowButton(); if(isUserLoggedIn()){ window.analytics.track('Follow', { creatorId: current_post.id, followerId: user.id, postId: current_post_id, }); makeApiRequest(`/manage-follow?action=follow&postId=${current_post.id}`).then(data => { console.log('Followed successfully:', data); }).catch(error => { console.error('Error following post:', error); alert('Error when trying to follow. Please try again.'); }); }else{ openRegisterModal(); } } function unfollowPost() { creators[current_post.userId].following = false; updateFollowButton(); if(isUserLoggedIn()){ window.analytics.track('Unfollow', { creatorId: current_post.id, followerId: user.id, postId: current_post_id, }); makeApiRequest(`/manage-follow?action=unfollow&postId=${current_post.id}`).then(data => { console.log('Unfollowed successfully:', data); }).catch(error => { console.error('Error unfollowing post:', error); alert('Error unfollowing post. Please try again.'); }); }else{ openRegisterModal(); } } function checkUserFollowsCreator(creatorId) { return new Promise((resolve, reject) => { makeApiRequest(`/check-follow/${creatorId}`).then(data => { console.log('Check follow status:', data); if (data.success) { resolve(true); } else { resolve(false); } }).catch(error => { console.error('Error checking follow status:', error); reject(false); }); }); } function formatViews(viewCount) { if (viewCount < 1000) { return viewCount; } else if (viewCount < 1000000) { return (viewCount / 1000).toFixed(2) + 'K'; } else if (viewCount < 1000000000) { return (viewCount / 1000000).toFixed(2) + 'M'; } else { return (viewCount / 1000000000).toFixed(2) + 'B'; } } function incrementEmoji(emoji) { const emoji_count = document.getElementById(emoji); emoji_count.textContent = (parseInt(emoji_count.textContent) + 1).toString(); } function resetEmoji(emoji) { const emoji_count = document.getElementById(emoji); emoji_count.textContent = "0"; } function addReaction(emoji) { if (!isUserLoggedIn()) { openRegisterModal(); return; } window.analytics.track('Add reaction', { post: current_post, emoji, }); incrementEmoji(emoji); const path = `/add-reaction?postId=${current_post_id}&emoji=${encodeURIComponent(emoji)}`; makeApiRequest(path).then(data => { console.log('Reaction added:', data); }).catch(error => { console.error('Error adding reaction:', error); alert('Error adding reaction. Please try again.'); }); } function displayReactions() { resetEmoji('💩'); resetEmoji('👀'); resetEmoji('😂'); resetEmoji('❤️'); resetEmoji('💯'); const path = `/get-reactions?postId=${current_post_id}`; console.log("Post id : " + current_post_id); makeApiRequest(path, false).then(data => { console.log('Reactions received:', data); for (let i = 0; i < data.reactions.length; i++) { incrementEmoji(data.reactions[i].emoji); } }).catch(error => { console.error('Error retrieving reactions:', error); alert('Error retrieving reactions. Please refresh the page.'); }); } function openMenu() { document.getElementById("menu").style.display = 'flex'; } function hideMenu() { if(window.innerWidth <= 768){ document.getElementById("menu").style.display = 'none'; } } if(window.innerWidth >= 768){ document.getElementById("menu").style.display = 'flex'; } function processJoinQueryParam() { const url = new URL(window.location.href); const params = url.searchParams; if (params.has('join')) { const joinValue = params.get('join'); console.log("Join param found with value = " + joinValue); localStorage.setItem('referrerId', joinValue); params.delete('join'); window.history.replaceState({}, '', url.toString()); } } function handleReferral() { const referrerId = localStorage.getItem('referrerId'); if (referrerId) { makeApiRequest("/accept-invitation?ambassadorUserId=" + referrerId).then(data => { console.log('Invitation processed:', data); window.analytics.track('invitation accepted', {ambassadorUserId: referrerId}); if(creators[referrerId]){ creators[referrerId].following = true; updateFollowButton(); } localStorage.removeItem('referrerId'); }).catch(error => { console.log("failed to accept invitation"); }); } } function copyReferrerId() { if(isUserLoggedIn()){ const referralUrl = `https://vapr.gg?join=${user.id}`; const textArea = document.createElement('textarea'); textArea.value = referralUrl; textArea.style.position = 'absolute'; textArea.style.left = '-9999px'; document.body.appendChild(textArea); textArea.select(); textArea.setSelectionRange(0, 99999); try { const successful = document.execCommand('copy'); console.log(successful ? 'Referral URL copied to clipboard!' : 'Failed to copy the URL'); Swal.fire({ title: "Invitation copied to clipboard!", text: "Your invitation link (" + referralUrl + "), has been copied to clipboard!", icon: "success" }); } catch (err) { console.error('Error copying to clipboard: ', err); Swal.fire({ title: "Failed to copy to clipboard!", text: "Your invitation link (" + referralUrl + "), has failed to copy to clipboard!", icon: "error" }); } document.body.removeChild(textArea); }else{ openRegisterModal(); } } processJoinQueryParam(); showInitialPost(); function setXPProgress(old_user, disable_xp_notif = false, force_update = false) { if(!user.xp){ user.xp = 0; } if(!user.level){ user.level = 0; } const total_xp = user.xp; const xp = Math.min(total_xp - old_user.xp, old_user.xp_required); updateLevel(); if(xp > 0 || force_update){ const diff = (xp / old_user.xp_required) * 100; const new_value = (total_xp / old_user.xp_required) * 100; const xp_bar_progress_visual = document.getElementById("xp_bar_progress_visual"); const xp_bar_progress = document.getElementById("xp_bar_progress"); const notification = document.getElementById('xp-notification'); xp_bar_progress_visual.style.width = diff + "%"; xp_bar_progress_visual.style.left = (new_value - diff) + "%"; if(!disable_xp_notif){ notification.style.animation = 'xpNotificationAnimation 1.5s'; notification.textContent = "+" + xp + "xp"; setTimeout(() => { notification.style.animation = 'none'; if(old_user.level < user.level){ console.log("Forcing xp") console.log(old_user); console.log(user); setXPProgress(window.user, true, true); } }, 1500); } setTimeout(() => { xp_bar_progress.style.width = new_value + "%"; xp_bar_progress_visual.style.width = "0%"; xp_bar_progress_visual.style.left = new_value + "%"; }, 500); } } function updateLevel() { const level_elements = document.getElementsByClassName("xp_level"); for (let i = 0; i < level_elements.length; i++) { level_elements[i].textContent = user.level; } } document.addEventListener('DOMContentLoaded', (event) => { const post = document.getElementsByClassName("post")[0]; let startX = 0; let startY = 0; let currentX = 0; let currentY = 0; let startTime = 0; post.addEventListener('touchstart', (e) => { startX = e.touches[0].clientX; startY = e.touches[0].clientY; currentX = startX; currentY = startY; startTime = new Date().getTime(); post.style.transition = 'none'; post.style.animation = 'none'; }); post.addEventListener('touchmove', (e) => { currentX = e.touches[0].clientX; currentY = e.touches[0].clientY; let changeX = currentX - startX; let changeY = currentY - startY; post.style.transform = `translate(${changeX}px, ${changeY}px) rotate(${changeX * 0.1}deg)`; }); post.addEventListener('touchend', (e) => { let changeX = currentX - startX; let changeY = currentY - startY; let elapsedTime = new Date().getTime() - startTime; let velocity = Math.abs(changeX) / elapsedTime; let velocityy = Math.abs(changeY) / elapsedTime; if (velocity > 0.3 || Math.abs(changeX) > 100) { if (changeX < -100) { setInitialTransform(post); dislikePost(); } else if (changeX > 100) { setInitialTransform(post); likePost(); } }else if (velocityy > 0.3 || Math.abs(changeY) > 100) { if (changeY < -100) { setInitialTransform(post); skipPost(); } } else { resetPostPosition(); } }); function resetPostPosition() { post.style.transition = 'transform 0.3s ease'; post.style.transform = 'translate(0px, 0px) rotate(0deg)'; } }); function setInitialTransform(post) { const transform = post.style.transform; console.log(transform); let translateX = transform.split("translate(")[1].split("px,"); let translateY = translateX[1].split('px)') const rotate = parseInt(translateY[1].split("rotate(")[1].split("deg)")[0]); translateY = parseInt(translateY[0]); translateX = parseInt(translateX[0]); console.log({ translateX: translateX, translateY: translateY, rotate }) post.style.setProperty('--start-translate-x', `${translateX}px`); post.style.setProperty('--start-translate-y', `${translateY}px`); post.style.setProperty('--start-rotate', `${rotate}deg`); post.style.transform = "translateY(100vh)"; post.style.transition = 'all 1s ease-in-out'; } function displayLikeAnimation() { const post = document.getElementsByClassName("post")[0]; post.style.animation = 'swipeRight 0.6s'; post.style.transform = "translateY(100vh)"; confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } }); } function displayDislikeAnimation() { const post = document.getElementsByClassName("post")[0]; post.style.animation = 'swipeLeft 0.6s'; post.style.transform = "translateY(100vh)"; } function displaySkipAnimation() { const post = document.getElementsByClassName("post")[0]; post.style.animation = 'skip 0.6s'; post.style.transform = "translateY(100vh)"; } function likePost() { if (isUserLoggedIn()) { displayLikeAnimation(); makeApiRequest("/like/" + current_post_id).then(data => { const oldUser = { xp: window.user.xp, level: window.user.level, xp_required: window.user.xp_required }; window.user = data.user; window.analytics.track('like', { post: current_post }); setXPProgress(oldUser); setTimeout(displayPost, 600); }).catch(error => { console.log(error); }); } else { if (post_seen > 7) { openRegisterModal(); } else { displayLikeAnimation(); setTimeout(displayPost, 600); } } } function skipPost() { if (isUserLoggedIn()) { displaySkipAnimation(); makeApiRequest("/skip/" + current_post_id).then(data => { const oldUser = { xp: window.user.xp, level: window.user.level, xp_required: window.user.xp_required }; window.user = data.user; setXPProgress(oldUser); window.analytics.track('skip', { post: current_post }); setTimeout(displayPost, 600); }).catch(error => { console.log(error); }); } else { if (post_seen > 7) { openRegisterModal(); } else { displaySkipAnimation(); setTimeout(displayPost, 600); } } } function dislikePost() { if (isUserLoggedIn()) { displayDislikeAnimation(); makeApiRequest("/dislike/" + current_post_id).then(data => { const oldUser = { xp: window.user.xp, level: window.user.level, xp_required: window.user.xp_required }; window.user = data.user; setXPProgress(oldUser); window.analytics.track('dislike', { post: current_post }); setTimeout(displayPost, 600); }).catch(error => { console.log(error); }); } else { if (post_seen > 7) { openRegisterModal(); } else { displayDislikeAnimation(); setTimeout(displayPost, 600); } } }