window.analytics = {};

function isOnMainePage(){
    if(document.getElementById("sign_in")){
        return true;
    }

    return false;
}

window.MainPage = isOnMainePage();

let analyticsData = {
    posts: [],
    timeRange: 7,
    charts: {
        performance: null,
        reactions: null
    },
    fullData: null
};

async function openAnalytics() {
    if (!isUserLoggedIn()) {
        openRegisterModal();
        return;
    }

    document.getElementById("analytics_modal").style.display = "flex";

   
    resetAnalyticsUI();

   
    await loadAnalyticsData();
}

function closeAnalytics() {
    document.getElementById("analytics_modal").style.display = "none";

   
    if (analyticsData.charts.performance) {
        analyticsData.charts.performance.destroy();
        analyticsData.charts.performance = null;
    }
    if (analyticsData.charts.reactions) {
        analyticsData.charts.reactions.destroy();
        analyticsData.charts.reactions = null;
    }
}

function resetAnalyticsUI() {
    document.getElementById("total_views").textContent = "Loading...";
    document.getElementById("total_likes").textContent = "Loading...";
    document.getElementById("total_followers").textContent = "Loading...";
    document.getElementById("total_clicks").textContent = "Loading...";
    document.getElementById("engagement_rate").textContent = "0%";
    document.getElementById("ctr_rate").textContent = "0%";
    document.getElementById("posts_table_body").innerHTML = '<tr><td colspan="8" style="text-align: center;">Loading posts...</td></tr>';
}

async function loadAnalyticsData() {
    try {
       
        const data = await makeApiRequest(`/api/analytics?range=${analyticsData.timeRange}`, true);

        if (!data.success) {
            throw new Error(data.error || 'Failed to load analytics');
        }

        analyticsData.fullData = data;
        analyticsData.posts = data.posts;

       
        updateOverviewMetrics(data);

       
        populatePostsTable();

       
        initializeCharts(data);

       
        setupAnalyticsEventListeners();

    } catch (error) {
        console.error("Error loading analytics data:", error);

       
        try {
            const fallbackData = await makeApiRequest("/me/posts", true);
            analyticsData.posts = fallbackData;
            calculateOverviewMetrics();
            populatePostsTable();
            initializeChartsWithFallback();
            setupAnalyticsEventListeners();
        } catch (fallbackError) {
            document.getElementById("posts_table_body").innerHTML = '<tr><td colspan="8" style="text-align: center; color: #e74c3c;">Failed to load analytics data</td></tr>';
        }
    }
}

function updateOverviewMetrics(data) {
    const totals = data.totals;
    const comparison = data.comparison;

   
    document.getElementById("total_views").textContent = formatNumber(totals.views);
    document.getElementById("total_likes").textContent = formatNumber(totals.likes);
    document.getElementById("total_followers").textContent = formatNumber(totals.followers);
    document.getElementById("total_clicks").textContent = formatNumber(totals.clicks);

   
    const totalEngagements = totals.likes + totals.dislikes + totals.follows;
    const engagementRate = totals.views > 0 ? ((totalEngagements / totals.views) * 100).toFixed(2) : 0;
    document.getElementById("engagement_rate").textContent = engagementRate + "%";
    document.getElementById("engagement_bar").style.width = Math.min(engagementRate, 100) + "%";

   
    const ctr = totals.views > 0 ? ((totals.clicks / totals.views) * 100).toFixed(2) : 0;
    document.getElementById("ctr_rate").textContent = ctr + "%";
    document.getElementById("ctr_bar").style.width = Math.min(ctr * 10, 100) + "%";

   
    if (comparison) {
        updateChangeIndicators(comparison);
    }
}

function updateChangeIndicators(comparison) {
    const statChanges = document.querySelectorAll('.stat-change');

   
    const changes = {
        0: comparison.views ? comparison.views.change : 0,     
        1: comparison.likes ? comparison.likes.change : 0,     
        2: comparison.follows ? comparison.follows.change : 0, 
        3: 0 
    };

    statChanges.forEach((el, index) => {
        const change = parseFloat(changes[index] || 0);
        el.textContent = (change >= 0 ? '+' : '') + change + '%';
        el.className = 'stat-change ' + (change >= 0 ? 'positive' : 'negative');
    });
}

function calculateOverviewMetrics() {
    const posts = analyticsData.posts;

    let totalViews = 0;
    let totalLikes = 0;
    let totalDislikes = 0;
    let totalFollows = 0;
    let totalClicks = 0;

    posts.forEach(post => {
        totalViews += post.viewsCount || 0;
        totalLikes += post.likesCount || 0;
        totalDislikes += post.dislikesCount || 0;
        totalFollows += post.followersCount || 0;
        totalClicks += post.linkClicksCount || 0;
    });

   
    document.getElementById("total_views").textContent = formatNumber(totalViews);
    document.getElementById("total_likes").textContent = formatNumber(totalLikes);
    document.getElementById("total_followers").textContent = formatNumber(totalFollows);
    document.getElementById("total_clicks").textContent = formatNumber(totalClicks);

   
    const totalEngagements = totalLikes + totalDislikes + totalFollows;
    const engagementRate = totalViews > 0 ? ((totalEngagements / totalViews) * 100).toFixed(2) : 0;
    document.getElementById("engagement_rate").textContent = engagementRate + "%";
    document.getElementById("engagement_bar").style.width = Math.min(engagementRate, 100) + "%";

   
    const ctr = totalViews > 0 ? ((totalClicks / totalViews) * 100).toFixed(2) : 0;
    document.getElementById("ctr_rate").textContent = ctr + "%";
    document.getElementById("ctr_bar").style.width = Math.min(ctr * 10, 100) + "%";
}

function populatePostsTable(sortBy = 'views') {
    const tbody = document.getElementById("posts_table_body");
    tbody.innerHTML = '';

    const posts = analyticsData.posts;
    if (!posts || posts.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">No posts found</td></tr>';
        return;
    }

   
    let sortedPosts = [...posts];
    switch(sortBy) {
        case 'views':
            sortedPosts.sort((a, b) => {
                const viewsA = a.metrics ? a.metrics.views : (a.viewsCount || 0);
                const viewsB = b.metrics ? b.metrics.views : (b.viewsCount || 0);
                return viewsB - viewsA;
            });
            break;
        case 'likes':
            sortedPosts.sort((a, b) => {
                const likesA = a.metrics ? a.metrics.likes : (a.likesCount || 0);
                const likesB = b.metrics ? b.metrics.likes : (b.likesCount || 0);
                return likesB - likesA;
            });
            break;
        case 'engagement':
            sortedPosts.sort((a, b) => {
                const engA = a.metrics ? parseFloat(a.metrics.engagement) : calculatePostEngagement(a);
                const engB = b.metrics ? parseFloat(b.metrics.engagement) : calculatePostEngagement(b);
                return engB - engA;
            });
            break;
        case 'recent':
            sortedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            break;
    }

   
    sortedPosts.forEach(post => {
        const metrics = post.metrics || {
            views: post.viewsCount || 0,
            likes: post.likesCount || 0,
            dislikes: post.dislikesCount || 0,
            follows: post.followersCount || 0,
            clicks: post.linkClicksCount || 0,
            engagement: calculatePostEngagement(post)
        };

        const row = document.createElement('tr');

        row.innerHTML = `
            <td><div class="post-title" title="${escapeHtml(post.title)}">${escapeHtml(post.title)}</div></td>
            <td>${formatNumber(metrics.views)}</td>
            <td>${formatNumber(metrics.likes)}</td>
            <td>${formatNumber(metrics.dislikes)}</td>
            <td>${formatNumber(metrics.follows)}</td>
            <td>${formatNumber(metrics.clicks)}</td>
            <td><span class="engagement-rate">${metrics.engagement}%</span></td>
            <td><a href="/post/${post.id}" class="glass_bt view-post-btn" target="_blank">View</a></td>
        `;

        tbody.appendChild(row);
    });
}

function calculatePostEngagement(post) {
    const views = post.metrics ? post.metrics.views : (post.viewsCount || 0);
    if (views === 0) return 0;

    const likes = post.metrics ? post.metrics.likes : (post.likesCount || 0);
    const dislikes = post.metrics ? post.metrics.dislikes : (post.dislikesCount || 0);
    const follows = post.metrics ? post.metrics.follows : (post.followersCount || 0);

    const engagements = likes + dislikes + follows;
    return ((engagements / views) * 100).toFixed(1);
}

function initializeCharts(data) {
   
    if (analyticsData.charts.performance) {
        analyticsData.charts.performance.destroy();
        analyticsData.charts.performance = null;
    }
    if (analyticsData.charts.reactions) {
        analyticsData.charts.reactions.destroy();
        analyticsData.charts.reactions = null;
    }

   
    const perfCtx = document.getElementById('performance_chart').getContext('2d');
    const perfData = generatePerformanceData(data.charts.timeSeries);

    analyticsData.charts.performance = new Chart(perfCtx, {
        type: 'line',
        data: perfData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

   
    const reactCtx = document.getElementById('reactions_chart').getContext('2d');
    const reactData = generateReactionsData(data.totals.reactions);

    analyticsData.charts.reactions = new Chart(reactCtx, {
        type: 'doughnut',
        data: reactData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                }
            }
        }
    });
}

function initializeChartsWithFallback() {
   
    if (analyticsData.charts.performance) {
        analyticsData.charts.performance.destroy();
        analyticsData.charts.performance = null;
    }
    if (analyticsData.charts.reactions) {
        analyticsData.charts.reactions.destroy();
        analyticsData.charts.reactions = null;
    }

   
    const perfCtx = document.getElementById('performance_chart').getContext('2d');
    const reactCtx = document.getElementById('reactions_chart').getContext('2d');

   
    analyticsData.charts.performance = new Chart(perfCtx, {
        type: 'line',
        data: {
            labels: ['No data available'],
            datasets: [{
                label: 'Views',
                data: [0],
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });

   
    analyticsData.charts.reactions = new Chart(reactCtx, {
        type: 'doughnut',
        data: {
            labels: ['No reactions data'],
            datasets: [{
                data: [1],
                backgroundColor: ['#95a5a6']
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false
        }
    });
}

function generatePerformanceData(timeSeries) {
    if (!timeSeries || timeSeries.length === 0) {
        return {
            labels: ['No data'],
            datasets: [{
                label: 'Views',
                data: [0],
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)'
            }]
        };
    }

    const labels = timeSeries.map(point => {
        const date = new Date(point.date);
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    });

    const viewsData = timeSeries.map(point => point.views);
    const likesData = timeSeries.map(point => point.likes);
    const clicksData = timeSeries.map(point => point.clicks);

    return {
        labels: labels,
        datasets: [
            {
                label: 'Views',
                data: viewsData,
                borderColor: '#3498db',
                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                tension: 0.3
            },
            {
                label: 'Likes',
                data: likesData,
                borderColor: '#2ecc71',
                backgroundColor: 'rgba(46, 204, 113, 0.1)',
                tension: 0.3
            },
            {
                label: 'Link Clicks',
                data: clicksData,
                borderColor: '#e74c3c',
                backgroundColor: 'rgba(231, 76, 60, 0.1)',
                tension: 0.3
            }
        ]
    };
}

function generateReactionsData(reactions) {
    if (!reactions || Object.keys(reactions).length === 0) {
        return {
            labels: ['No reactions yet'],
            datasets: [{
                data: [1],
                backgroundColor: ['#95a5a6']
            }]
        };
    }

    const emojiMap = {
        '❤️': { label: 'Love', color: '#e74c3c' },
        '😂': { label: 'Funny', color: '#f39c12' },
        '👀': { label: 'Wow', color: '#3498db' },
        '💯': { label: 'Perfect', color: '#2ecc71' },
        '💩': { label: 'Bad', color: '#95a5a6' }
    };

    const labels = [];
    const data = [];
    const colors = [];

    Object.entries(reactions).forEach(([emoji, count]) => {
        const info = emojiMap[emoji] || { label: emoji, color: '#7f8c8d' };
        labels.push(`${emoji} ${info.label}`);
        data.push(count);
        colors.push(info.color);
    });

    return {
        labels: labels,
        datasets: [{
            data: data,
            backgroundColor: colors
        }]
    };
}

function setupAnalyticsEventListeners() {
   
    const rangeButtons = document.querySelectorAll('.range-btn');
    const sortDropdown = document.getElementById('sort_posts');

   
    rangeButtons.forEach(btn => {
       
        const newBtn = btn.cloneNode(true);
        btn.parentNode.replaceChild(newBtn, btn);

        newBtn.addEventListener('click', async (e) => {
            document.querySelectorAll('.range-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');

            const range = e.target.dataset.range;
            analyticsData.timeRange = range === 'all' ? 'all' : parseInt(range);

           
            resetAnalyticsUI();
            await loadAnalyticsData();
        });
    });

   
    if (sortDropdown) {
       
        const newDropdown = sortDropdown.cloneNode(true);
        sortDropdown.parentNode.replaceChild(newDropdown, sortDropdown);

        newDropdown.addEventListener('change', (e) => {
            populatePostsTable(e.target.value);
        });
    }
}

function formatNumber(num) {
    if (num < 1000) return num.toString();
    if (num < 1000000) return (num / 1000).toFixed(1) + 'K';
    if (num < 1000000000) return (num / 1000000).toFixed(1) + 'M';
    return (num / 1000000000).toFixed(1) + 'B';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function exportAnalyticsData() {
    const data = {
        overview: {
            totalViews: document.getElementById("total_views").textContent,
            totalLikes: document.getElementById("total_likes").textContent,
            totalFollowers: document.getElementById("total_followers").textContent,
            totalClicks: document.getElementById("total_clicks").textContent,
            engagementRate: document.getElementById("engagement_rate").textContent,
            ctr: document.getElementById("ctr_rate").textContent
        },
        posts: analyticsData.posts,
        timeRange: analyticsData.timeRange,
        fullData: analyticsData.fullData,
        exportDate: new Date().toISOString()
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vapr-analytics-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
}
function loadUserData(){
    if(MainPage){
        document.getElementById("sign_in").style.display = "none";
        document.getElementById("add_post").style.display = "none";
    }


    makeApiRequest("/me").then(data => {
        window.user = data;

        if(!MainPage){
            return;
        }

        updateUsername();
        updateLevel();

        

        const oldUser = {
            xp: 0,
            level: window.user.level,
            xp_required: window.user.xp_required
        };

        setXPProgress(oldUser, true);

        document.getElementById("sign_in").style.display = "none";
        if(window.innerWidth <= 768){
            document.getElementById("add_post").style.display = "block";
        }

        document.getElementById("xp_bar").style.display = "block";

        loading_steps--;
        hideLoading();

        handleReferral();

    }).catch( error => {
        document.getElementById("sign_in").style.display = "block";
        if(window.innerWidth <= 768){
            document.getElementById("add_post").style.display = "block";
        }
        document.getElementById("add_post").onclick = openRegisterModal;
        loading_steps--;
        hideLoading();
    })
}
background_images = [
    {
        "id": "sunset_crush",
        "title": "Sunset Crush",
        "description": "Illustration from the music album Sunset Crush by Bip Bop Music",
        "image_url": "https://vapr-club.b-cdn.net/backgrounds/sunset_crush.png",
        "link": "https://www.youtube.com/watch?v=OU55Q9k7538&list=OLAK5uy_lSbP59KQr3hAI9h3DDdFI32BXO8AnpAJA",
        "link_text": "Listen on YouTube",
        "unlock": 0,
        "rarity": "common",
        "new": false
    },
    {
        "id": "pixel_mirage",
        "title": "Pixel Mirage",
        "description": "Illustration from the music album Pixel Mirage by Bip Bop Music",
        "image_url": "https://vapr-club.b-cdn.net/backgrounds/pixel_mirage.png",
        "link": "https://music.youtube.com/playlist?list=OLAK5uy_lD663FKcik2jpJwnZzkPLeQbaOgPqN75Y",
        "link_text": "Listen on YouTube Music",
        "unlock": 0,
        "rarity": "common",
        "new": true
    },
    {
        "id": "bip_bop_music",
        "title": "Bip Bop Music",
        "description": "Illustration from Bip Bop Music",
        "image_url": "https://vapr-club.b-cdn.net/backgrounds/bip_bop_music.png",
        "link": "https://www.youtube.com/@BipBopMusic",
        "link_text": "Subscribe on YouTube",
        "unlock": 2,
        "rarity": "rare",
        "new": true
    },
]
function equipBackground(url, save = true) {
    const saved_background = localStorage.getItem('background_url');
    closeCustomizationMenu();
    hideMenu();

    if(!saved_background){
        localStorage.setItem('background_url', url);
    }else if(saved_background !== url) {
        localStorage.setItem('background_url', url);
    }
    document.body.style.backgroundImage = 'url(' + url + ')';
}

function updateBackgroundId(newBackgroundId) {
    if (!isUserLoggedIn()) {
        alert('You must be logged in to update your background.');
        return;
    }

    const path = `/me/update-background?backgroundId=${encodeURIComponent(newBackgroundId)}`;
    makeApiRequest(path, true)
        .then(response => {
            console.log('Background updated successfully:', response);
           
        })
        .catch(error => {
            console.error('Failed to update background:', error);
            alert('Failed to update background. Please try again.');
        });
}

function openCustomizationMenu() {
    displayBackgroundImages();
    document.getElementById("background_images").style.display = "flex";
}

function closeCustomizationMenu() {
    document.getElementById("background_images").style.display = "none";
}

function displayBackgroundImages() {
    if (!isUserLoggedIn()) {
        openRegisterModal();
        return;
    }

    const container = document.getElementById("background_images_container");
    container.innerHTML = '';

   
    const currentBackground = localStorage.getItem('background_url');

    background_images.forEach(bg => {
        const isUnlocked = user.level >= bg.unlock;
        const isEquipped = currentBackground === bg.image_url;
        const progress = Math.min((user.level / bg.unlock) * 100, 100);

        const card = document.createElement('li');
        card.className = `background-card ${!isUnlocked ? 'locked' : ''} ${isEquipped ? 'equipped' : ''}`;

        let rarityClass = `rarity-${bg.rarity}`;
        let rarityText = bg.rarity.charAt(0).toUpperCase() + bg.rarity.slice(1);

        card.innerHTML = `
            <div class="rarity-badge ${rarityClass}">${rarityText}</div>
            ${bg.new && isUnlocked ? '<div class="new-badge">NEW</div>' : ''}
            
            <img src="${bg.image_url}" class="background-preview" alt="${bg.title}">
            
            <div class="background-info">
                <h4 class="background-title">${bg.title}</h4>
                <p class="background-description">${bg.description}</p>
                ${bg.link ? `
                    <a href="${bg.link}" target="_blank" class="background-link" onclick="event.stopPropagation()">
                        <i class="fa-solid fa-external-link-alt"></i>
                        ${bg.link_text || 'View Source'}
                    </a>
                ` : ''}
            </div>
            
            ${!isUnlocked ? `
                <div class="lock-overlay">
                    <i class="fa-solid fa-lock lock-icon"></i>
                    <div class="unlock-text">Unlock at Level ${bg.unlock}</div>
                    <div class="unlock-progress">
                        <div class="unlock-progress-fill" style="width: ${progress}%"></div>
                    </div>
                </div>
            ` : ''}
        `;

        if (isUnlocked && !isEquipped) {
            card.onclick = () => {
               
                card.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    card.style.transform = '';
                }, 100);

                updateBackgroundId(bg.id);
                equipBackground(bg.image_url);

               
                if (typeof confetti !== 'undefined') {
                    confetti({
                        particleCount: 50,
                        spread: 50,
                        origin: { y: 0.6 },
                        colors: ['#ff6b6b', '#4ecdc4', '#ffe66d']
                    });
                }

               
                displayBackgroundImages();
            };
        }

        container.appendChild(card);
    });
}
async function updateGithubStars(element) {
    try {
        const response = await fetch('https://api.github.com/repos/Vic92548/VAPR');
        if (!response.ok) throw new Error('GitHub API error');

        const data = await response.json();
        const stars = data.stargazers_count;

        element.textContent = `${stars} ⭐`;
    } catch (error) {
        console.error('Failed to fetch GitHub stars:', error);
        element.textContent = '⭐️ N/A';
    }
}

if(MainPage){
    updateGithubStars(document.getElementById('github_stars'));
}
function makeImageBig(img) {
    img.classList.remove("normal_image");
    img.classList.add("big_image");
    window.analytics.track('image_zoom_out', { post: current_post });
}

function makeImageNormal(img) {
    img.classList.remove("big_image");
    img.classList.add("normal_image");
    window.analytics.track('image_zoom_in', { post: current_post });
}

function switchImage(img) {
    if(img.classList.contains("big_image")){
        makeImageNormal(img);
    }else{
        makeImageBig(img);
    }
}
async function openLeaderboardModal() {
    if(!isUserLoggedIn()){
        openRegisterModal();
        return;
    }
    const modal = document.getElementById("leaderboard_modal");
    const xpTodayEl = document.getElementById("xp_today");
    const listEl = document.getElementById("leaderboard_list");

    modal.style.display = "flex";
    xpTodayEl.innerHTML = "Loading...";
    listEl.innerHTML = "";

    const jwt = localStorage.getItem("jwt");
    if (!jwt) {
        xpTodayEl.innerHTML = "You must be logged in to view the leaderboard.";
        return;
    }

    const headers = new Headers({
        "Authorization": `Bearer ${jwt}`
    });

    try {
        const [xpRes, leaderboardRes] = await Promise.all([
            fetch("/api/xp-today", { headers }),
            fetch("/api/leaderboard", { headers })
        ]);

        if (!xpRes.ok || !leaderboardRes.ok) {
            throw new Error("Unauthorized or failed request");
        }

        const xpData = await xpRes.json();
        const leaderboard = await leaderboardRes.json();

        xpTodayEl.innerHTML = `You earned <span style="color:#27ae60;">+${xpData.xp}</span> XP today.`;

        leaderboard.forEach((entry, index) => {
            const li = document.createElement("li");
            li.innerHTML = `
                <strong>#${index + 1} @${entry.username}</strong> 
                (Lvl ${entry.level}) — 
                <span style="color:#2ecc71;">+${entry.ownXp}</span> own XP + 
                <span style="color:#3498db;">+${entry.inviteesXp}</span> from invites 
                = <b>${entry.score}</b> total
            `;
            listEl.appendChild(li);
        });


    } catch (err) {
        xpTodayEl.innerHTML = "Failed to load leaderboard. Are you logged in?";
        console.warn("Leaderboard load error:", err);
    }
}

function initPlayerPreferences() {
    const backgroundUrl = localStorage.getItem('background_url');

    if(backgroundUrl){
        equipBackground(backgroundUrl);
    }
}

initPlayerPreferences();
let feed_posts = [];
let loading_steps = 2;
let post_seen = 0;
let creators = {};

function showInitialPost() {
    const path = window.location.pathname.split('/');

    if(path.length < 3){
        displayPost();
    }else if(path[1] === "post"){
        displayPost(path[2]);
    }
}

function makeApiRequest(path, requireAuth = true) {
    return new Promise((resolve, reject) => {
       
        let jwt = localStorage.getItem('jwt');
        if (jwt === null) {
            jwt = "";
            if(requireAuth){
                reject("No JWT found in local storage.");
                return;
            }

        }



        console.log("JWT:" + jwt);
       
        const headers = new Headers({
            "Authorization": `Bearer ${jwt}`,
            "Content-Type": "application/json"
        });

       
        fetch(path, {
            method: 'GET',
            headers: headers
        })
        .then(response => {
            if (!response.ok) {
                console.log(response);

                if(response.status === 401){
                    reject("Unauthorized");
                }else{
                    throw new Error('Network response was not ok: ' + response.statusText);
                }

                
            }
            return response.json(); 
        })
        .then(data => {
            resolve(data); 
        })
        .catch(error => {
            reject(error); 
        });
    });
}

function isUserLoggedIn(){
    if(window.user){
        return true;
    }else{
        return false;
    }
}

function updateUsername() {
    const level_elements = document.getElementsByClassName("username");
    for (let i = 0; i < level_elements.length; i++) {
        level_elements[i].textContent = user.username;
        console.log("updated username : " + user.username);
    }
}

loadUserData();

function hideLoading(){

    console.log("steps:"+loading_steps);


   
}

function showLoading(){
   

   
}

function timeAgo(dateParam) {
    if (!dateParam) {
        return null;
    }

    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);
    const today = new Date();
    const seconds = Math.round((today - date) / 1000);
    const minutes = Math.round(seconds / 60);
    const hours = Math.round(minutes / 60);
    const days = Math.round(hours / 24);
    const months = Math.round(days / 30.4);
    const years = Math.round(days / 365);

    if (seconds < 60) {
        return `${seconds} seconds ago`;
    } else if (minutes < 60) {
        return `${minutes} minutes ago`;
    } else if (hours < 24) {
        return `${hours} hours ago`;
    } else if (days < 30) {
        return `${days} days ago`;
    } else if (months < 12) {
        return `${months} months ago`;
    } else {
        return `${years} years ago`;
    }
}

function setupSocialLink(id, link){
    const link_bt = document.getElementById(id);
    link_bt.style.display = "inline-block";
    link_bt.href = link;
}



let current_post_id = undefined;
let current_post = undefined;



function hidePost() {
    showLoading();
    document.getElementById("post_video").children[0].src = "";
    document.getElementsByClassName("post")[0].style.transform = "translateY(100vh)";
}


function opeNewPostModel() {
    if(isUserLoggedIn()){
        document.getElementById("add-post").style.display = "flex";
    }else{
        openRegisterModal();
    }

}
function closeNewPostModel() {
    document.getElementById("add-post").style.display = "none";
}

function openRegisterModal() {
    document.getElementById("register").style.display = "flex";
}

function openUserAccountModel() {
    document.getElementById("account").style.display = "flex";

    makeApiRequest("/me/posts").then(data => {

        console.log("Coucou");
        console.log(data);

        const old_posts = document.getElementById("old-posts");
        old_posts.innerHTML = "";

        for (let i = 0; i < data.length; i++) {
            old_posts.innerHTML += '<div class="post-card">\n' +
                '                    <h4>' + data[i].title + '</h4>\n' +
                '                    <div style="display: flex; justify-content: space-between">\n' +
                '                        <span><i class="fa-solid fa-eye"></i> <span>loading...</span></span>\n' +
                '                        <span><i class="fa-solid fa-heart"></i> <span>loading...</span></span>\n' +
                '                        <span><i class="fa-solid fa-heart-crack"></i> <span>loading...</span></span>\n' +
                '                        <span><i class="fa-solid fa-forward"></i> <span>loading...</span></span>\n' +
                '                    </div>\n' +
                '                </div>'
        }
    }).catch( () => {
        const old_posts = document.getElementById("old-posts");
        old_posts.innerHTML = "<p>You don't have created any posts yet, what are you waiting for? :)</p>";
    })
}

async function updateFollowButton() {

    const follow_bt = document.getElementById("follow");

    if(isUserLoggedIn()){
        let following;

        console.log("CURRENT POST");
        console.log(current_post);

        if(creators[current_post.userId]){
            following = creators[current_post.userId].following;
        }else{
            creators[current_post.userId] = {
                following: false
            }
        }

        if(following === undefined){
            following = await checkUserFollowsCreator(current_post.userId);
            creators[current_post.userId].following = following;
        }


        follow_bt.style.opacity = "0";
        follow_bt.style.display = "inline-block";

        if(following){
            follow_bt.innerHTML = '<i class="fa-solid fa-user-minus"></i>';
            follow_bt.onclick = unfollowPost;
            follow_bt.style.border = "1px solid rgb(206 220 247 / 42%)";
            follow_bt.style.backgroundColor = "rgb(190 213 255 / 40%)";
        }else{
            follow_bt.innerHTML = '<i class="fa-solid fa-user-plus"></i>';
            follow_bt.onclick = followPost;
            follow_bt.style.border = "1px solid rgb(77 137 245)";
            follow_bt.style.backgroundColor = "rgb(95 148 243)";
        }

        follow_bt.style.opacity = "1";

        if(current_post.userId === user.id){
            follow_bt.style.opacity = "0";
            follow_bt.style.display = "none";
        }
    }else{
        follow_bt.onclick = openRegisterModal;
    }

}

function followPost() {

    creators[current_post.userId].following = true;
    updateFollowButton();
    if(isUserLoggedIn()){

        makeApiRequest(`/manage-follow?action=follow&postId=${current_post.id}`).then(data => {
            console.log('Followed successfully:', data);

        }).catch(error => {
            console.error('Error following post:', error);
            alert('Error when trying to follow. Please try again.');
        });
    }else{
        openRegisterModal();
    }

}

function unfollowPost() {
    creators[current_post.userId].following = false;
    updateFollowButton();
    if(isUserLoggedIn()){

        makeApiRequest(`/manage-follow?action=unfollow&postId=${current_post.id}`).then(data => {
            console.log('Unfollowed successfully:', data);
        }).catch(error => {
            console.error('Error unfollowing post:', error);
            alert('Error unfollowing post. Please try again.');
        });
    }else{
        openRegisterModal();
    }

}

function checkUserFollowsCreator(creatorId) {
    return new Promise((resolve, reject) => {
        makeApiRequest(`/check-follow/${creatorId}`).then(data => {
            console.log('Check follow status:', data);
            if (data.success) {
                resolve(true);
            } else {
                resolve(false);
            }
        }).catch(error => {
            console.error('Error checking follow status:', error);
            reject(false); 
        });
    });
}

function formatViews(viewCount) {
    if (viewCount < 1000) {
        return viewCount;
    } else if (viewCount < 1000000) {
        return (viewCount / 1000).toFixed(2) + 'K';
    } else if (viewCount < 1000000000) {
        return (viewCount / 1000000).toFixed(2) + 'M';
    } else {
        return (viewCount / 1000000000).toFixed(2) + 'B';
    }
}

function openMenu() {
    document.getElementById("menu").style.display = 'flex';
}

function hideMenu() {
    if(window.innerWidth <= 768){
        document.getElementById("menu").style.display = 'none';
    }
}

if(MainPage){
    if(window.innerWidth >= 768){
        document.getElementById("menu").style.display = 'flex';
    }
}

function processJoinQueryParam() {
   
    const url = new URL(window.location.href);

   
    const params = url.searchParams;

   
    if (params.has('join')) {
       
        const joinValue = params.get('join');

        console.log("Join param found with value = " + joinValue);

       
        localStorage.setItem('referrerId', joinValue);

       
        params.delete('join');

       
        window.history.replaceState({}, '', url.toString());
    }
}

function handleReferral() {
   
    const referrerId = localStorage.getItem('referrerId');

    if (referrerId) {

        makeApiRequest("/accept-invitation?ambassadorUserId=" + referrerId).then(data => {
            console.log('Invitation processed:', data);

            if(creators[referrerId]){
                creators[referrerId].following = true;
                updateFollowButton();
            }


           
            localStorage.removeItem('referrerId');


        }).catch(error => {
            console.log("failed to accept invitation");
        });

    }
}

function openTextModal(text) {
    document.getElementById("text_modal_text").textContent = text;
    document.getElementById("text_modal").style.display = 'block';
}

function closeTextModal() {
    document.getElementById("text_modal").style.display = 'none';
}

function copyReferrerId() {
   
    if(isUserLoggedIn()){
        const referralUrl = `https://vapr.club?join=${user.id}`;

       
        const textArea = document.createElement('textarea');
        textArea.value = referralUrl;

       
        textArea.style.position = 'absolute';
        textArea.style.left = '-9999px';

       
        document.body.appendChild(textArea);

       
        textArea.select();
        textArea.setSelectionRange(0, 99999);

        try {
           
            const successful = document.execCommand('copy');

           
            console.log(successful ? 'Referral URL copied to clipboard!' : 'Failed to copy the URL');

            Swal.fire({
                title: "Invitation copied to clipboard!",
                text: "Your invitation link (" + referralUrl + "), has been copied to clipboard!",
                icon: "success"
            });
        } catch (err) {
            console.error('Error copying to clipboard: ', err);

            Swal.fire({
                title: "Failed to copy to clipboard!",
                text: "Your invitation link (" + referralUrl + "), has failed to copy to clipboard!",
                icon: "error"
            });
        }

       
        document.body.removeChild(textArea);
    }else{
        openRegisterModal();
    }
}

processJoinQueryParam();

if(MainPage){
    showInitialPost();

    fetch("/api/user-count")
        .then(res => res.json())
        .then(data => {
            document.getElementById("user_count").textContent = data.count.toLocaleString();
        })
        .catch(() => {
            document.getElementById("user_count").textContent = "hundreds of";
        });
}




function initMenu() {
    if (!MainPage) return;

   
    if (isUserLoggedIn()) {
        updateMenuUserInfo();
        showMenuUserElements();
        updateQuickStats();
    }

   
    updateOnlineUsers();

   
    addMenuAnimations();

   
    if (document.getElementById('github_stars')) {
        updateGithubStars(document.getElementById('github_stars'));
    }
}

function updateMenuUserInfo() {
    if (!window.user) return;

   
    const menuAvatar = document.getElementById('menu_user_avatar');
    if (menuAvatar && window.user.avatar) {
        menuAvatar.src = `https://cdn.discordapp.com/avatars/${window.user.id}/${window.user.avatar}.png?size=128`;
    } else if (menuAvatar) {
       
        menuAvatar.src = 'https://vapr-club.b-cdn.net/default_vapr_avatar.png';
    }

   
    const menuUsername = document.getElementById('menu_username');
    if (menuUsername) {
        menuUsername.textContent = '@' + window.user.username;
    }

   
    const menuLevel = document.getElementById('menu_user_level');
    if (menuLevel) {
        menuLevel.textContent = window.user.level || 0;
    }

   
    updateMenuXPBar();
}

function updateMenuXPBar() {
    if (!window.user) return;

    const xp = window.user.xp || 0;
    const xpRequired = window.user.xp_required || 700;
    const xpPercentage = (xp / xpRequired) * 100;

    const xpBar = document.getElementById('menu_xp_bar');
    const xpText = document.getElementById('menu_xp_text');

    if (xpBar) {
        xpBar.style.width = xpPercentage + '%';
    }

    if (xpText) {
        xpText.textContent = `${xp} / ${xpRequired} XP`;
    }
}

function showMenuUserElements() {
    const userCard = document.getElementById('menu_user_info');
    const quickStats = document.getElementById('quick_stats');
    const logoutBtn = document.getElementById('logout_btn');

    if (userCard) userCard.style.display = 'flex';
    if (quickStats) quickStats.style.display = 'grid';
    if (logoutBtn) logoutBtn.style.display = 'flex';
}

async function updateQuickStats() {
    try {
       
        const xpResponse = await makeApiRequest('/api/xp-today', true);
        if (xpResponse && xpResponse.xp !== undefined) {
            const dailyXPEl = document.getElementById('daily_xp');
            if (dailyXPEl) {
                animateCounter(dailyXPEl, 0, xpResponse.xp, 1000);
            }
        }

       
        const postsResponse = await makeApiRequest('/me/posts', true);
        if (postsResponse && Array.isArray(postsResponse)) {
            let totalFollowers = 0;
            let totalViews = 0;

            postsResponse.forEach(post => {
                totalFollowers += post.followersCount || 0;
                totalViews += post.viewsCount || 0;
            });

            const followerEl = document.getElementById('follower_count');
            const viewsEl = document.getElementById('total_views');

            if (followerEl) {
                animateCounter(followerEl, 0, totalFollowers, 1000);
            }
            if (viewsEl) {
                animateCounter(viewsEl, 0, totalViews, 1000);
            }
        }
    } catch (error) {
        console.error('Error updating quick stats:', error);
    }
}

function animateCounter(element, start, end, duration) {
    const startTime = performance.now();

    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

       
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);

        const currentValue = Math.floor(start + (end - start) * easeOutQuart);
        element.textContent = formatNumber(currentValue);

        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }

    requestAnimationFrame(updateCounter);
}

function formatNumber(num) {
    if (num < 1000) return num.toString();
    if (num < 1000000) return (num / 1000).toFixed(1) + 'K';
    return (num / 1000000).toFixed(1) + 'M';
}

async function updateOnlineUsers() {
    try {
        const response = await fetch('/api/user-count');
        const data = await response.json();

        const onlineEl = document.getElementById('online_users');
        if (onlineEl && data.count) {
            onlineEl.textContent = data.count.toLocaleString() + ' online';
        }
    } catch (error) {
        console.error('Error fetching online users:', error);
    }
}

function addMenuAnimations() {
    const menuItems = document.querySelectorAll('.menu-item');

    menuItems.forEach((item, index) => {
       
        item.style.opacity = '0';
        item.style.transform = 'translateX(-20px)';

        setTimeout(() => {
            item.style.transition = 'all 0.3s ease';
            item.style.opacity = '1';
            item.style.transform = 'translateX(0)';
        }, index * 50);

       
        item.addEventListener('mouseenter', () => {
           
        });
    });
}

function openMenu() {
    const menu = document.getElementById('menu');
    if (!menu) return;

    menu.style.display = 'flex';

   
    if (isUserLoggedIn()) {
        updateMenuUserInfo();
        updateQuickStats();
    }

   
    const menuContainer = menu.querySelector('.menu-container');
    if (menuContainer) {
        menuContainer.style.transform = 'translateX(-100%)';
        menuContainer.style.opacity = '0';

        setTimeout(() => {
            menuContainer.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            menuContainer.style.transform = 'translateX(0)';
            menuContainer.style.opacity = '1';
        }, 10);
    }

   
    addMenuAnimations();
}

function hideMenu() {
    const menu = document.getElementById('menu');
    if (!menu) return;

    const menuContainer = menu.querySelector('.menu-container');
    if (menuContainer) {
        menuContainer.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        menuContainer.style.transform = 'translateX(-100%)';
        menuContainer.style.opacity = '0';

        setTimeout(() => {
            menu.style.display = 'none';
        }, 300);
    } else {
        menu.style.display = 'none';
    }
}

function logout() {
    if (confirm('Are you sure you want to logout?')) {
        localStorage.removeItem('jwt');
        window.user = null;
        window.location.href = '/';
    }
}

const originalOpenNewPostModel = window.opeNewPostModel;
window.opeNewPostModel = function() {
    hideMenu();
    originalOpenNewPostModel();
};

const originalOpenAnalytics = window.openAnalytics;
window.openAnalytics = function() {
    hideMenu();
    originalOpenAnalytics();
};

const originalOpenCustomizationMenu = window.openCustomizationMenu;
window.openCustomizationMenu = function() {
    hideMenu();
    originalOpenCustomizationMenu();
};

const originalOpenLeaderboardModal = window.openLeaderboardModal;
window.openLeaderboardModal = function() {
    hideMenu();
    originalOpenLeaderboardModal();
};

if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', initMenu);

   
    const originalLoadUserData = window.loadUserData;
    window.loadUserData = function() {
        originalLoadUserData();
        setTimeout(initMenu, 500);
    };
}
function displayPage(type) {
    const post = document.getElementsByClassName("post")[0];
    const game = document.getElementsByClassName("game")[0];

    if(type === "post"){
        game.style.display = "none";
        post.style.display = "block";

        showPost();
    }else if(type === "game"){
        game.style.display = "block";
        post.style.display = "none";


    }
}
function drawPost(data){
    displayReactions();

    makeApiRequest("/register-view?postId=" + data.id, false).then(data => {
        console.log(data);
        console.log("Views updated");
    });

    post_seen++;
    showPost();
    console.log("Post DATA:");
    console.log(data);

    updateFollowButton();

   
    const titleEl = document.getElementById("post_title");
    const showMoreButtonEl = document.getElementById("post_title_show_more");
    titleEl.textContent = data.title;

    requestAnimationFrame(() => {
        const isClamped = titleEl.scrollHeight > titleEl.clientHeight;

        if (isClamped) {
            showMoreButtonEl.style.display = "inline-block";
            showMoreButtonEl.onclick = () => {
                titleEl.classList.toggle("expanded");
                const isExpanded = titleEl.classList.contains("expanded");
                showMoreButtonEl.innerHTML = isExpanded
                    ? `<i class="fa-solid fa-chevron-up"></i> Show less`
                    : `<i class="fa-solid fa-chevron-down"></i> Show more`;

               
                if (isExpanded) {
                    titleEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            };
        } else {
            showMoreButtonEl.style.display = "none";
        }
    });

   
    const username = data.username;
    document.getElementById("post_username").textContent = "@" + username;

   
    const avatarImg = document.getElementById("user_avatar_img");
    const avatarLetter = document.getElementById("avatar_letter");
    const avatarEl = document.getElementById("user_avatar");

   
    if (data.userId && window.creators && window.creators[data.userId]) {
        const creatorInfo = window.creators[data.userId];
        if (creatorInfo.avatar) {
           
            avatarImg.src = `https://cdn.discordapp.com/avatars/${data.userId}/${creatorInfo.avatar}.png?size=128`;
            avatarImg.style.display = "block";
            avatarLetter.style.display = "none";
            avatarEl.style.background = "none";
        } else {
            showLetterAvatar();
        }
    } else {
       
        makeApiRequest(`/api/user/${data.userId}`, false).then(userInfo => {
            if (userInfo && userInfo.avatar) {
                avatarImg.src = `https://cdn.discordapp.com/avatars/${data.userId}/${userInfo.avatar}.png?size=128`;
                avatarImg.style.display = "block";
                avatarLetter.style.display = "none";
                avatarEl.style.background = "none";

               
                if (!window.creators[data.userId]) {
                    window.creators[data.userId] = {};
                }
                window.creators[data.userId].avatar = userInfo.avatar;
            } else {
                showLetterAvatar();
            }
        }).catch(() => {
            showLetterAvatar();
        });
    }

    function showLetterAvatar() {
       
        avatarImg.style.display = "none";
        avatarLetter.style.display = "flex";
        avatarLetter.textContent = username.charAt(0).toUpperCase();

       
        const hue = username.charCodeAt(0) * 3 % 360;
        avatarEl.style.background = `linear-gradient(135deg, hsl(${hue}, 70%, 50%), hsl(${hue + 30}, 70%, 60%))`;
    }

    document.getElementById("post_time").textContent = timeAgo(data.timestamp);

   
    animateViewCount(data.views);

    if(!data.content){
        data.content = "https://vapr.b-cdn.net/posts/200w.gif";
    }

    if(data.content.split("/posts/")[0] === "https://vapr-club.b-cdn.net"){
        document.getElementById("post_image").src = data.content;
        document.getElementById("post_image").style.display = "block";
        document.getElementById("post_content").style.display = "none";
        document.getElementById("post_video").style.display = "none";

       
        const imageEl = document.getElementById("post_image");
        imageEl.style.filter = "blur(10px)";
        imageEl.onload = () => {
            imageEl.style.filter = "none";
            imageEl.style.transition = "filter 0.3s ease";
        };
    }else if(data.content.includes("iframe.mediadelivery.net")){
        document.getElementById("post_video").style.display = "block";
        setTimeout(() => {
            document.getElementById("post_video").children[0].src = data.content;
        }, 100);
        document.getElementById("post_content").style.display = "none";
        document.getElementById("post_image").style.display = "none";
    }

    document.getElementById("post_image").onclick = function () {
        toggleImageZoom(document.getElementById("post_image"));
    }

   
    const headerLinkButton = document.getElementById("header_link_button");
    const links = document.getElementById("post_link").children;

   
    for(let i = 0; i < links.length; i++){
        links[i].style.display = "none";
    }

    headerLinkButton.style.display = "none";

    if(data.link){
       
        handlePostLinks(data.link);
    }
}

function navigateToProfile() {
    if (current_post && current_post.username) {
        window.location.href = `/@${current_post.username}`;
    }
}

function animateViewCount(targetViews) {
    const viewsEl = document.getElementById("post_views");
    const startViews = parseInt(viewsEl.textContent) || 0;
    const duration = 1000;
    const startTime = performance.now();

    function updateViews(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

       
        const easeOutQuart = 1 - Math.pow(1 - progress, 4);

        const currentViews = Math.floor(startViews + (targetViews - startViews) * easeOutQuart);
        viewsEl.textContent = formatViews(currentViews);

        if (progress < 1) {
            requestAnimationFrame(updateViews);
        }
    }

    requestAnimationFrame(updateViews);
}

function toggleImageZoom(img) {
    if (img.classList.contains('zoomed')) {
       
        img.classList.remove('zoomed');
        document.querySelector('.image-overlay')?.remove();
    } else {
       
        const overlay = document.createElement('div');
        overlay.className = 'image-overlay';
        overlay.onclick = () => toggleImageZoom(img);

       
        const zoomedImg = img.cloneNode();
        zoomedImg.className = 'zoomed-image';

        overlay.appendChild(zoomedImg);
        document.body.appendChild(overlay);

        img.classList.add('zoomed');

       
        requestAnimationFrame(() => {
            overlay.classList.add('active');
        });
    }
}

function handlePostLinks(link) {
    try {
        const url = new URL(link);
        const hostname = url.hostname.toLowerCase();

       
        const linkMappings = {
            'discord.gg': { id: 'post_discord', icon: 'fa-brands fa-discord', label: 'Discord' },
            'reddit.com': { id: 'post_reddit', icon: 'fa-brands fa-reddit', label: 'Reddit' },
            'store.steampowered.com': { id: 'post_steam', icon: 'fa-brands fa-steam', label: 'Steam' },
            'x.com': { id: 'post_x', icon: 'fa-brands fa-x-twitter', label: 'X' },
            'twitter.com': { id: 'post_x', icon: 'fa-brands fa-x-twitter', label: 'X' },
            'threads.net': { id: 'post_threads', icon: 'fa-brands fa-threads', label: 'Threads' },
            'pinterest': { id: 'post_pinterest', icon: 'fa-brands fa-pinterest', label: 'Pinterest' },
            'twitch.tv': { id: 'post_twitch', icon: 'fa-brands fa-twitch', label: 'Twitch' },
            'youtube.com': { id: 'post_youtube', icon: 'fa-brands fa-youtube', label: 'YouTube' },
            'instagram.com': { id: 'post_instagram', icon: 'fa-brands fa-instagram', label: 'Instagram' },
            'store.epicgames.com': { id: 'post_epic', icon: 'fa-solid fa-gamepad', label: 'Epic Games' },
            'kickstarter.com': { id: 'post_kickstarter', icon: 'fa-brands fa-kickstarter', label: 'Kickstarter' },
            'kick.com': { id: 'post_kick', icon: 'fa-brands fa-kickstarter-k', label: 'Kick' },
            'patreon.com': { id: 'post_patreon', icon: 'fa-brands fa-patreon', label: 'Patreon' },
            'fortnite.com': { id: 'post_fortnite', icon: 'fa-solid fa-gamepad', label: 'Fortnite' },
            'nintendo.com': { id: 'post_nintendo', icon: 'fa-solid fa-gamepad', label: 'Nintendo' },
            'ubisoft.com': { id: 'post_ubisoft', icon: 'fa-solid fa-gamepad', label: 'Ubisoft' },
            'gumroad.com': { id: 'post_gumroad', icon: 'fa-solid fa-shopping-cart', label: 'Gumroad' },
            'garryhost.com': { id: 'post_garryhost', icon: 'fa-solid fa-server', label: "Garry's Host" },
            'itch.io': { id: 'post_itch', icon: 'fa-brands fa-itch-io', label: 'itch.io' }
        };

       
        let matchedLink = null;
        for (const [domain, linkInfo] of Object.entries(linkMappings)) {
            if (hostname.includes(domain)) {
                matchedLink = linkInfo;
                setupSocialLink(linkInfo.id, link);
                break;
            }
        }

       
        if (hostname === 'hayarobi-portfolio.carrd.co') {
            matchedLink = { id: 'post_hayarobi', icon: 'fa-solid fa-palette', label: 'Hayarobi' };
            setupSocialLink('post_hayarobi', link);
        }

       
        if (matchedLink) {
            const headerLinkButton = document.getElementById("header_link_button");
            headerLinkButton.style.display = "inline-flex";
            headerLinkButton.href = link;
            headerLinkButton.innerHTML = `<i class="${matchedLink.icon}"></i><span>${matchedLink.label}</span>`;

           
            headerLinkButton.style.opacity = '0';
            headerLinkButton.style.transform = 'translateY(10px)';

            setTimeout(() => {
                headerLinkButton.style.transition = 'all 0.3s ease';
                headerLinkButton.style.opacity = '1';
                headerLinkButton.style.transform = 'translateY(0)';
            }, 100);
        }

    } catch (error) {
        console.error('Invalid URL:', link);
    }
}
function showPost() {
    const post = document.getElementsByClassName("post")[0];
    post.style.transform = "translate(0px, 0px) rotate(0deg)";

    post.style.backgroundColor = "rgba(255,255,255,0.4)";
    post.style.boxShadow = "0 0px 15px rgba(255, 255, 255, 0.3)";

    post.style.animation = 'none';
}

function displayPost(postId = undefined){
    hidePost();
    if(!postId){

        if(feed_posts.length > 0){
            const data = feed_posts.shift();

            loading_steps--;
            hideLoading();

            current_post_id = data.id;
            current_post = data;
            drawPost(data);


            history.pushState(null, null, "/post/" + data.id);


        }else{
            makeApiRequest("/feed", false).then(data => {

                console.log(data);

                feed_posts = data.sort((a, b) => 0.5 - Math.random());

                console.log(data);

                displayPost();

            }).catch(error => {
                console.log(error);
            });

        }


    }else{
        makeApiRequest("/posts/"+postId, false).then(data => {

            loading_steps--;
            hideLoading();

            current_post_id = data.id;
            current_post = data;
            drawPost(data);


            history.pushState(null, null, "/post/" + data.id);
        }).catch(error => {
            console.log(error);
        });
    }

}

let user_previous_reaction = null;
let isProcessingReaction = false;

function initEnhancedReactions() {
   
    const reactionButtons = document.querySelectorAll('.reactions button');

    reactionButtons.forEach(btn => {
       
        btn.addEventListener('click', function(e) {
            createRipple(e, this);
        });
    });
}

function createRipple(event, button) {
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;

    ripple.style.cssText = `
        position: absolute;
        width: ${size}px;
        height: ${size}px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.5);
        pointer-events: none;
        transform: translate(${x}px, ${y}px) scale(0);
        animation: rippleEffect 0.6s ease-out;
    `;

    button.appendChild(ripple);

    setTimeout(() => ripple.remove(), 600);
}

function incrementEmoji(emoji) {
    const emoji_count = document.getElementById(emoji);
    const currentCount = parseInt(emoji_count.textContent);
    const newCount = currentCount + 1;

   
    emoji_count.style.transform = 'scale(1.5)';
    emoji_count.style.color = '#4ecdc4';

    setTimeout(() => {
        emoji_count.textContent = newCount;
        emoji_count.style.transform = 'scale(1)';
        emoji_count.style.color = '';
    }, 200);
}

function decrementEmoji(emoji) {
    const emoji_count = document.getElementById(emoji);
    const currentCount = parseInt(emoji_count.textContent);
    const newCount = Math.max(0, currentCount - 1);

   
    emoji_count.style.transform = 'scale(0.8)';
    emoji_count.style.color = '#e74c3c';

    setTimeout(() => {
        emoji_count.textContent = newCount;
        emoji_count.style.transform = 'scale(1)';
        emoji_count.style.color = '';
    }, 200);
}

function resetEmoji(emoji) {
    const emoji_count = document.getElementById(emoji);
    emoji_count.textContent = "0";
}

function addReaction(emoji) {
    if (!isUserLoggedIn()) {
       
        const reactionsContainer = document.querySelector('.reactions');
        reactionsContainer.style.animation = 'shake 0.5s ease';
        setTimeout(() => {
            reactionsContainer.style.animation = '';
            openRegisterModal();
        }, 500);
        return;
    }

    if (isProcessingReaction) return;

    isProcessingReaction = true;

   
    const currentBtn = document.querySelector(`[data-reaction="${emoji}"]`);
    const wasActive = currentBtn.classList.contains('active');

   
    if (user_previous_reaction && user_previous_reaction !== emoji) {
        const prevBtn = document.querySelector(`[data-reaction="${user_previous_reaction}"]`);
        prevBtn.classList.remove('active');
        decrementEmoji(user_previous_reaction);
    }

    if (!wasActive) {
        currentBtn.classList.add('active');
        incrementEmoji(emoji);
        animateReactionIcon(currentBtn.querySelector('.reaction_icon'));
        createFloatingReaction(emoji, currentBtn);
    } else {
       
        currentBtn.classList.remove('active');
        decrementEmoji(emoji);
        emoji = null;
    }

    const path = `/add-reaction?postId=${current_post_id}&emoji=${encodeURIComponent(emoji)}`;
    makeApiRequest(path).then(data => {
        console.log('Reaction added:', data);
        user_previous_reaction = emoji;
        isProcessingReaction = false;
    }).catch(error => {
        console.error('Error adding reaction:', error);

       
        if (user_previous_reaction) {
            incrementEmoji(user_previous_reaction);
            decrementEmoji(emoji);
        }

        currentBtn.classList.toggle('active');
        isProcessingReaction = false;
    });
}

function animateReactionIcon(icon) {
    icon.style.animation = 'none';
    setTimeout(() => {
        icon.style.animation = 'bounce 0.5s ease';
    }, 10);
}

function createFloatingReaction(emoji, button) {
    const floater = document.createElement('div');
    floater.className = 'floating-reaction';
    floater.textContent = emoji;

    const rect = button.getBoundingClientRect();
    floater.style.cssText = `
        position: fixed;
        left: ${rect.left + rect.width / 2}px;
        top: ${rect.top}px;
        font-size: 30px;
        pointer-events: none;
        z-index: 1000;
        animation: floatUp 1s ease-out forwards;
    `;

    document.body.appendChild(floater);
    setTimeout(() => floater.remove(), 1000);
}

function displayReactions() {
   
    document.querySelectorAll('.reactions button').forEach(btn => {
        btn.classList.remove('active');
    });

    resetEmoji('💩');
    resetEmoji('👀');
    resetEmoji('😂');
    resetEmoji('❤️');
    resetEmoji('💯');

    const path = `/get-reactions?postId=${current_post_id}`;

    console.log("Post id : " + current_post_id);

    makeApiRequest(path, false).then(data => {
        console.log('Reactions received:', data);

        user_previous_reaction = null;

       
        data.reactions.forEach((reaction, index) => {
            setTimeout(() => {
                incrementEmoji(reaction.emoji);

               
                if (reaction.userId === window.user?.id) {
                    user_previous_reaction = reaction.emoji;
                    const btn = document.querySelector(`[data-reaction="${reaction.emoji}"]`);
                    btn.classList.add('active');
                }
            }, index * 50);
        });

    }).catch(error => {
        console.error('Error retrieving reactions:', error);
    });
}

if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', initEnhancedReactions);
}
function setXPProgress(old_user, disable_xp_notif = false, force_update = false) {

    if(!user.xp){
        user.xp = 0;
    }

    if(!user.level){
        user.level = 0;
    }

    const total_xp = user.xp;
    const xp = Math.min(total_xp - old_user.xp, old_user.xp_required);

    updateLevel();

    if(xp > 0 || force_update){
        const diff = (xp / old_user.xp_required) * 100;
        const new_value = (total_xp / old_user.xp_required) * 100;

        const xp_bar_progress_visual = document.getElementById("xp_bar_progress_visual");
        const xp_bar_progress = document.getElementById("xp_bar_progress");
        const notification = document.getElementById('xp-notification');

        xp_bar_progress_visual.style.width = diff + "%";
        xp_bar_progress_visual.style.left = (new_value - diff) + "%";

        if(!disable_xp_notif){
            notification.style.animation = 'xpNotificationAnimation 1.5s';
            notification.textContent = "+" + xp + "xp";

            setTimeout(() => {
                notification.style.animation = 'none';

                if(old_user.level < user.level){
                    console.log("Forcing xp")
                    console.log(old_user);
                    console.log(user);
                    setXPProgress(window.user, true, true);
                }

            }, 1500);
        }

        setTimeout(() => {
            xp_bar_progress.style.width = new_value + "%";
            xp_bar_progress_visual.style.width = "0%";
            xp_bar_progress_visual.style.left = new_value + "%";
        }, 500);


    }
}

function updateLevel() {
    const level_elements = document.getElementsByClassName("xp_level");
    for (let i = 0; i < level_elements.length; i++) {
        level_elements[i].textContent = user.level;
    }
}
document.addEventListener('DOMContentLoaded', (event) => {
    if(!MainPage){
        return;
    }

    const post = document.getElementsByClassName("post")[0];
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let currentY = 0;
    let startTime = 0;

    post.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        currentX = startX;
        currentY = startY;
        startTime = new Date().getTime();
        post.style.transition = 'none';
        post.style.animation = 'none';
    });

    post.addEventListener('touchmove', (e) => {
        currentX = e.touches[0].clientX;
        currentY = e.touches[0].clientY;
        let changeX = currentX - startX;
        let changeY = currentY - startY;
        post.style.transform = `translate(${changeX}px, ${changeY}px) rotate(${changeX * 0.1}deg)`;
    });

    post.addEventListener('touchend', (e) => {
        let changeX = currentX - startX;
        let changeY = currentY - startY;
        let elapsedTime = new Date().getTime() - startTime;
        let velocity = Math.abs(changeX) / elapsedTime;
        let velocityy = Math.abs(changeY) / elapsedTime;

        if (velocity > 0.3 || Math.abs(changeX) > 100) {
            if (changeX < -100) {
                dislikePost();
            } else if (changeX > 100) {
                likePost();
            }
        }else if (velocityy > 0.3 || Math.abs(changeY) > 100) {
            if (changeY < -100) {
                skipPost();
            }
        } else {
            resetPostPosition();
        }
    });

    function resetPostPosition() {
        post.style.transition = 'transform 0.3s ease';
        post.style.transform = 'translate(0px, 0px) rotate(0deg)';
    }
});

function setInitialTransform(post) {
    const transform = post.style.transform;

    console.log(transform);
    let translateX = transform.split("translate(")[1].split("px,");
    let translateY = translateX[1].split('px)')
    const rotate = parseInt(translateY[1].split("rotate(")[1].split("deg)")[0]);
    translateY = parseInt(translateY[0]);
    translateX = parseInt(translateX[0]);

    console.log({
        translateX: translateX,
        translateY: translateY,
        rotate
    })

    post.style.setProperty('--start-translate-x', `${translateX}px`);
    post.style.setProperty('--start-translate-y', `${translateY}px`);
    post.style.setProperty('--start-rotate', `${rotate}deg`);

    post.style.transform = "translateY(100vh)";
    post.style.transition = 'all 1s ease-in-out';
}

function showActionFeedback(action) {
    const feedback = document.createElement('div');
    feedback.className = 'action-feedback ' + action;
    feedback.innerHTML = `<i class="fa-solid fa-${action === 'liked' ? 'heart' : action === 'passed' ? 'heart-crack' : 'forward'}"></i> ${action.charAt(0).toUpperCase() + action.slice(1)}!`;

    document.body.appendChild(feedback);

    setTimeout(() => {
        feedback.remove();
    }, 1000);
}

function displayLikeAnimation() {
    const post = document.getElementsByClassName("post")[0];
    post.style.animation = 'swipeRight 0.6s';
    post.style.transform = "translateY(100vh)";

    showActionFeedback('liked');

    confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: ['#22c55e', '#10b981', '#059669']
    });
}

function displayDislikeAnimation() {
    const post = document.getElementsByClassName("post")[0];
    post.style.animation = 'swipeLeft 0.6s';
    post.style.transform = "translateY(100vh)";

    showActionFeedback('passed');
}

function displaySkipAnimation() {
    const post = document.getElementsByClassName("post")[0];
    post.style.animation = 'skip 0.6s';
    post.style.transform = "translateY(100vh)";

    showActionFeedback('skipped');
}

function likePost() {
    const post = document.getElementsByClassName("post")[0];
    setInitialTransform(post);
    if (isUserLoggedIn()) {
        displayLikeAnimation();
        makeApiRequest("/like/" + current_post_id).then(data => {
            const oldUser = {
                xp: window.user.xp,
                level: window.user.level,
                xp_required: window.user.xp_required
            };
            window.user = data.user;
            setXPProgress(oldUser);
            setTimeout(displayPost, 600);
        }).catch(error => {
            console.log(error);
        });
    } else {
        if (post_seen > 3) {
            openRegisterModal();
        } else {
            displayLikeAnimation();
            setTimeout(displayPost, 1000);
        }
    }
}

function skipPost() {
    const post = document.getElementsByClassName("post")[0];
    setInitialTransform(post);
    if (isUserLoggedIn()) {
        displaySkipAnimation();
        makeApiRequest("/skip/" + current_post_id).then(data => {
            const oldUser = {
                xp: window.user.xp,
                level: window.user.level,
                xp_required: window.user.xp_required
            };
            window.user = data.user;
            setXPProgress(oldUser);
            setTimeout(displayPost, 600);
        }).catch(error => {
            console.log(error);
        });
    } else {
        if (post_seen > 3) {
            openRegisterModal();
        } else {
            displaySkipAnimation();
            setTimeout(displayPost, 1000);
        }
    }
}

function dislikePost() {
    const post = document.getElementsByClassName("post")[0];
    setInitialTransform(post);
    if (isUserLoggedIn()) {
        displayDislikeAnimation();
        makeApiRequest("/dislike/" + current_post_id).then(data => {
            const oldUser = {
                xp: window.user.xp,
                level: window.user.level,
                xp_required: window.user.xp_required
            };
            window.user = data.user;
            setXPProgress(oldUser);
            setTimeout(displayPost, 600);
        }).catch(error => {
            console.log(error);
        });
    } else {
        if (post_seen > 3) {
            openRegisterModal();
        } else {
            displayDislikeAnimation();
            setTimeout(displayPost, 1000);
        }
    }
}

if (!document.getElementById('action-feedback-styles')) {
    const style = document.createElement('style');
    style.id = 'action-feedback-styles';
    style.textContent = `
        .action-feedback {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px 40px;
            border-radius: 50px;
            font-size: 24px;
            font-weight: 700;
            z-index: 10000;
            animation: feedbackPulse 0.5s ease-out;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .action-feedback.liked {
            background: rgba(34, 197, 94, 0.9);
        }

        .action-feedback.passed {
            background: rgba(239, 68, 68, 0.9);
        }

        .action-feedback.skipped {
            background: rgba(59, 130, 246, 0.9);
        }

        @keyframes feedbackPulse {
            0% {
                transform: translate(-50%, -50%) scale(0.8);
                opacity: 0;
            }
            50% {
                transform: translate(-50%, -50%) scale(1.1);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 0.9;
            }
        }
    `;
    document.head.appendChild(style);
}
if(MainPage){
    document.getElementById('file').addEventListener('change', function() {
        if (this.files && this.files[0]) {
            var reader = new FileReader();
            reader.onload = function(e) {
                var fileType = this.files[0].type;
                var previewImage = document.getElementById('preview_img');
                var previewVideo = document.getElementById('preview_video');

                if (fileType.startsWith('video/')) {
                    previewVideo.src = e.target.result;
                    previewVideo.style.display = "block";
                    previewVideo.controls = true;
                    previewImage.style.display = "none";
                    document.querySelector('.upload-text').textContent = 'Click to replace the video';
                } else if (fileType.startsWith('image/')) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = "block";
                    previewVideo.style.display = "none";
                    document.querySelector('.upload-text').textContent = 'Click to replace the image';
                } else {
                    alert('Unsupported file type. Please upload an image or video.');
                    return;
                }

                document.getElementById('upload-icon').hidden = true;
            }.bind(this);
            reader.readAsDataURL(this.files[0]);
        }
    });

    document.getElementById('postForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const title = document.getElementById('title').value;
        const link = document.getElementById('link').value;
        const file = document.getElementById('file').files[0];

        const formData = new FormData();
        formData.append('title', title);
        formData.append('link', link);

        if (file) {
            const fileExtension = file.name.split('.').pop();
            const fileName = `${new Date().getTime()}.${fileExtension}`;
            const fileContentType = file.type || 'application/octet-stream';

           
            const blob = new Blob([file], { type: fileContentType });

           
            formData.append("file", blob, fileName);
        }

        const jwt = localStorage.getItem('jwt');

       
        const headers = new Headers({
            "Authorization": `Bearer ${jwt}`
        });

        try {
            document.getElementById("add-post").style.display = "none";
            hidePost();
            hideMenu();

            const response = await fetch('/posts', {
                method: 'POST',
                body: formData,
                headers: headers
            });

            const result = await response.json();
            if (response.ok) {
                if(result.success){

                    document.getElementById("add-post").style.display = "none";
                    confetti({
                        particleCount: 100,
                        spread: 70,
                        origin: { y: 0.6 }
                    });
                    displayPost(result.id);

                    const Toast = Swal.mixin({
                        toast: true,
                        position: "top-end",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.onmouseenter = Swal.stopTimer;
                            toast.onmouseleave = Swal.resumeTimer;
                        }
                    });
                    Toast.fire({
                        icon: "success",
                        title: "Post created successfully!"
                    });
                   

                   
                    document.getElementById('title').value = '';
                    document.getElementById('file').value = '';
                    document.getElementById('link').value = '';
                    document.getElementById('preview_img').style.display = 'none';
                    document.getElementById('preview_video').style.display = 'none';
                    document.querySelector('.upload-text').textContent = 'Click to upload an image';

                    const oldUser = {
                        xp: window.user.xp,
                        level: window.user.level,
                        xp_required: window.user.xp_required
                    };

                    window.user = result.user;

                    setXPProgress(oldUser);
                } else {
                    Swal.fire({
                        title: "Error submitting your post :/",
                        text: result.msg,
                        icon: "error"
                    });
                }
            } else {
                alert('Failed to create post. Please try again with another image.');
                displayPost();
            }
        } catch (error) {
            console.error('Failed to submit post:', error);
            alert('Error submitting post.');
        }
    });

}
function initProfilePage() {
    if (!window.profileData) return;

   
    if (isUserLoggedIn()) {
        addFollowButton();
    }

   
    makeProfilePostsInteractive();

   
    addProfileInteractions();
}

function addFollowButton() {
    const profileHeader = document.querySelector('.profile-info');
    if (!profileHeader || !window.user || window.user.id === window.profileData.id) {
        return;
    }

    const followBtn = document.createElement('button');
    followBtn.className = 'glass_bt follow-profile-btn';
    followBtn.id = 'profile_follow_btn';

   
    checkProfileFollowStatus(window.profileData.id).then(isFollowing => {
        if (isFollowing) {
            followBtn.innerHTML = '<i class="fa-solid fa-user-minus"></i> Following';
            followBtn.classList.add('following');
        } else {
            followBtn.innerHTML = '<i class="fa-solid fa-user-plus"></i> Follow';
        }
    });

    followBtn.onclick = () => toggleProfileFollow();

    profileHeader.appendChild(followBtn);
}

async function checkProfileFollowStatus(profileUserId) {
    try {
        const response = await makeApiRequest(`/api/check-follow-status?profileUserId=${profileUserId}`);
        return response.isFollowing;
    } catch (error) {
        console.error("Error checking follow status:", error);
        return false;
    }
}

async function toggleProfileFollow() {
    if (!isUserLoggedIn()) {
        window.location.href = '/login';
        return;
    }

    const followBtn = document.getElementById('profile_follow_btn');
    if (!followBtn) return;

    const isFollowing = followBtn.classList.contains('following');
    const action = isFollowing ? "unfollow" : "follow";

    try {
       
        const tempPost = { id: "profile_follow", userId: window.profileData.id };

        const response = await makeApiRequest(`/manage-follow?action=${action}&postId=${tempPost.id}`);

        if (response) {
            const followerCountEl = document.querySelector('.stat-value[data-stat="followers"]');

            if (isFollowing) {
                followBtn.innerHTML = '<i class="fa-solid fa-user-plus"></i> Follow';
                followBtn.classList.remove('following');
               
                if (followerCountEl) {
                    const currentCount = parseInt(followerCountEl.textContent.replace(/[^0-9]/g, ''));
                    followerCountEl.textContent = formatNumber(Math.max(0, currentCount - 1));
                }
            } else {
                followBtn.innerHTML = '<i class="fa-solid fa-user-minus"></i> Following';
                followBtn.classList.add('following');
               
                if (followerCountEl) {
                    const currentCount = parseInt(followerCountEl.textContent.replace(/[^0-9]/g, ''));
                    followerCountEl.textContent = formatNumber(currentCount + 1);
                }
            }
        }
    } catch (error) {
        console.error("Error toggling follow:", error);
    }
}

function makeProfilePostsInteractive() {
   
    const postCards = document.querySelectorAll('.profile-post-card');

    postCards.forEach(card => {
       
        card.addEventListener('click', (e) => {
            e.preventDefault();
            const postId = card.href.split('/post/')[1];

           
            sessionStorage.setItem('previousPage', window.location.pathname);

           
            window.location.href = card.href;
        });
    });
}

function addProfileInteractions() {
   
    const style = document.createElement('style');
    style.textContent = `
        .follow-profile-btn {
            background-color: rgb(95, 148, 243);
            color: white;
            padding: 10px 20px;
            font-weight: 700;
            margin-top: 10px;
            border: none;
            cursor: pointer;
        }
        
        .follow-profile-btn.following {
            background-color: rgba(190, 213, 255, 0.4);
            border: 1px solid rgb(206, 220, 247, 0.42);
        }
        
        .follow-profile-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(95, 148, 243, 0.4);
        }
        
        .stat-value[data-stat="followers"] {
            transition: all 0.3s ease;
        }
    `;
    document.head.appendChild(style);
}

function formatNumber(num) {
    if (num < 1000) return num.toString();
    if (num < 1000000) return (num / 1000).toFixed(1) + 'K';
    if (num < 1000000000) return (num / 1000000).toFixed(1) + 'M';
    return (num / 1000000000).toFixed(1) + 'B';
}

document.addEventListener('DOMContentLoaded', () => {
    initProfilePage();
});

if (typeof drawPost !== 'undefined') {
    const originalDrawPost = drawPost;
    drawPost = function(data) {
        originalDrawPost(data);

        const usernameElement = document.getElementById("post_username");
        if (usernameElement && data.username) {
            usernameElement.style.cursor = "pointer";
            usernameElement.onclick = (e) => {
                e.preventDefault();
                window.location.href = `/@${data.username}`;
            };
        }
    };
}
